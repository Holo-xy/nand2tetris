// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution 
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:    
     Mux16(a = false, b = instruction, sel = instruction[15],
     out[0] = JG, out[1] = JE, out[2] = JL, out[3] = Mflag, out[4] = Dflag, out[5] = Aflag, out[6] = no, out[7] = f, 
     out[8] = ny, out[9] = zy, out[10] = nx, out[11] = zx, out[12] = AorM);
	
    Mux16(a = instruction, b = ALUout, sel = instruction[15], out = MuxOut);
    Not(in = instruction[15], out = Aop);
    Or(a = Aop, b = Aflag, out = loadA);
    ARegister(in = MuxOut, load = loadA, out = AregOut, out[0..14] = addressM);
    
    
    Mux16(a = AregOut, b =inM, sel = AorM, out = y);
       DRegister(in = ALUout, load = Dflag , out = x);

       ALU(x = x, y = y, zx = zx, nx = nx, zy = zy, 
           ny = 	ny, f = f, no = no, zr = zr, ng = ng, out = ALUout, out = outM);


    // JMP instructions handling 
    Not(in = zr, out = zero);
    Not(in = ng, out = neg);
    And(a = zero, b = neg, out = GTZ);
    And(a = JG, b = GTZ, out = JGT);
    And(a = JE , b = zr, out = JEQ);	
    And(a = JL, b = ng, out = JLT);
    Or(a = JGT, b = JEQ, out = j);
    Or(a = j, b = JLT , out = JMP);
    PC(in = AregOut, load = JMP, inc = true, reset = reset, out[0..14] = pc);

    And(a = Mflag, b = true, out = writeM);
}